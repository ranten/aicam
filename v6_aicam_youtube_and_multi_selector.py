# -*- coding: utf-8 -*-
"""V6 AICAM YOUTUBE and Multi Selector

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gPhKX8fMErvwOQ2wjyo484tcjKbUBwoC
"""

!pip install ultralytics flask pyngrok opencv-python-headless
!apt install ffmpeg

html_code = """
<!DOCTYPE html>
<html lang="he" dir="rtl">
<head>
    <meta charset="utf-8">
    <title>People Counter - AI Developments</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 40px; background: #fafbfc; }
        .container { display: flex; flex-direction: row; justify-content: center; align-items: flex-start; gap: 40px; }
        .video-box { flex: 2; }
        .params-box {
            flex: 1;
            background: #fff;
            border-radius: 12px;
            box-shadow: 0 2px 8px #0001;
            padding: 32px 24px;
            min-width: 320px;
            max-width: 400px;
        }
        .params-box h3 { margin-top: 0; }
        label { font-weight: bold; }
        .param-group { margin-bottom: 20px; }
        .param-group input[type="text"], .param-group input[type="number"] { width: 100%; padding: 5px; border: 1px solid #bbb; border-radius: 5px; }
        .param-group input[type="range"] { width: 85%; }
        .param-group input[type="checkbox"] { margin-left: 8px; }
        .save-btn {
            background: #1b83e3;
            color: white;
            border: none;
            border-radius: 7px;
            padding: 10px 30px;
            font-size: 1.2em;
            cursor: pointer;
        }
        .save-btn:hover { background: #1568b2; }
        #stats-box {
            margin-top: 40px;
            background: #f4f6f9;
            border-radius: 12px;
            box-shadow: 0 2px 8px #0001;
            padding: 24px;
            direction: rtl;
        }
        #stats-box hr { margin: 16px 0; }
        #historyChart { background: #fff; border-radius: 8px; }
    </style>
</head>
<body>
    <h1>AI Developments - מונה אנשים בבינה מלאכותית</h1>
    <div class="container">
        <!-- חלק שמאל: וידאו -->
        <div class="video-box">
            <img id="videoStream" src="/video_feed" width="850" style="border-radius: 12px; box-shadow: 0 4px 24px #0002;">
            <!-- סטטיסטיקות מתעדכנות -->
            <div id="stats-box">
                <h3>סטטיסטיקות בזמן אמת (10 דקות אחרונות)</h3>
                <div>
                    <strong>ממוצע אנשים:</strong> <span id="avg_people">-</span><br>
                    <strong>ממוצע רכבים:</strong> <span id="avg_cars">-</span><br>
                    <strong>ממוצע משאיות:</strong> <span id="avg_trucks">-</span>
                </div>
                <hr>
                <h3>גרף שעה אחרונה</h3>
                <canvas id="historyChart" height="130"></canvas>
            </div>
        </div>
        <!-- חלק ימין: פרמטרים -->
        <div class="params-box">
            <form method="post">
                <h3>הגדרות זיהוי</h3>
                <!-- כתובת YouTube -->
                <div class="param-group">
                    <label for="youtube_url">כתובת YouTube Live:</label><br>
                    <input type="text" id="youtube_url" name="youtube_url" value="{{ youtube_url|e }}">
                </div>
                <!-- Drop down -->
                <div class="param-group">
                    <label for="predefined_stream">או בחר ממצלמות לייב פופולריות:</label><br>
                    <select id="predefined_stream">
                        <option value="">-- בחר ממצלמות --</option>
                        {% for stream in predefined_streams %}
                            <option value="{{ stream.url }}">{{ stream.name }}</option>
                        {% endfor %}
                    </select>
                </div>
                <!-- סליידר קונפידנס -->
                <div class="param-group">
                    <label for="conf">סף זיהוי (Confidence):</label><br>
                    <input type="range" id="conf" name="conf" min="0.01" max="1" step="0.01" value="{{ conf }}">
                    <span id="confValue">{{ conf }}</span>
                </div>
                <!-- צ'קבוקסים לאובייקטים -->
                <div class="param-group">
                    <label>מה לזהות?</label><br>
                    <input type="checkbox" id="detect_people" name="detect_people" {% if detect_people %}checked{% endif %}>
                    <label for="detect_people">אנשים</label>
                    <input type="checkbox" id="detect_cars" name="detect_cars" {% if detect_cars %}checked{% endif %}>
                    <label for="detect_cars">מכוניות</label>
                    <input type="checkbox" id="detect_trucks" name="detect_trucks" {% if detect_trucks %}checked{% endif %}>
                    <label for="detect_trucks">משאיות</label>
                </div>
                <!-- סליידר פריימים בשנייה -->
                <div class="param-group">
                    <label for="fps">פריימים לשנייה:</label><br>
                    <input type="range" id="fps" name="fps" min="1" max="10" step="1" value="{{ fps }}">
                    <span id="fpsValue">{{ fps }}</span>
                </div>
                <div class="param-group" style="text-align: left;">
                    <button type="submit" class="save-btn">שמור</button>
                </div>
            </form>
        </div>
    </div>
    <!-- צ'ארט גרף -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        // עדכון ערך קונפידנס לייד הסליידר
        document.getElementById('conf').oninput = function() {
            document.getElementById('confValue').innerText = this.value;
        };
        document.getElementById('fps').oninput = function() {
            document.getElementById('fpsValue').innerText = this.value;
        };
        // כאשר נבחר סטרים דרופדאון - מלא אוטומטית באינפוט
        document.getElementById('predefined_stream').onchange = function() {
            if (this.value) {
                document.getElementById('youtube_url').value = this.value;
            }
        };
        // סטטיסטיקות וגרף
        let historyChart = null;

        function updateStats() {
            fetch('/stats')
            .then(r => r.json())
            .then(data => {
                document.getElementById('avg_people').innerText = data.avg_people_10min;
                document.getElementById('avg_cars').innerText = data.avg_cars_10min;
                document.getElementById('avg_trucks').innerText = data.avg_trucks_10min;

                const labels = data.chart.map(pt => {
                    const date = new Date(pt.t * 1000);
                    return date.getHours().toString().padStart(2, '0') + ':' + date.getMinutes().toString().padStart(2, '0');
                });
                const peopleData = data.chart.map(pt => pt.people);
                const carsData = data.chart.map(pt => pt.cars);
                const trucksData = data.chart.map(pt => pt.trucks);

                if (!historyChart) {
                    const ctx = document.getElementById('historyChart').getContext('2d');
                    historyChart = new Chart(ctx, {
                        type: 'line',
                        data: {
                            labels: labels,
                            datasets: [
                                {
                                    label: 'אנשים',
                                    data: peopleData,
                                    fill: false,
                                    borderWidth: 2
                                },
                                {
                                    label: 'רכבים',
                                    data: carsData,
                                    fill: false,
                                    borderWidth: 2
                                },
                                {
                                    label: 'משאיות',
                                    data: trucksData,
                                    fill: false,
                                    borderWidth: 2
                                }
                            ]
                        },
                        options: {
                            responsive: true,
                            plugins: {
                                legend: { display: true, position: 'bottom' }
                            },
                            scales: {
                                y: {
                                    beginAtZero: true
                                }
                            }
                        }
                    });
                } else {
                    historyChart.data.labels = labels;
                    historyChart.data.datasets[0].data = peopleData;
                    historyChart.data.datasets[1].data = carsData;
                    historyChart.data.datasets[2].data = trucksData;
                    historyChart.update();
                }
            });
        }

        setInterval(updateStats, 10000);
        window.onload = function() {
            document.getElementById('confValue').innerText = document.getElementById('conf').value;
            document.getElementById('fpsValue').innerText = document.getElementById('fps').value;
            updateStats();
        };
    </script>
    <footer style="margin-top:40px; padding:18px 0 6px 0; text-align:center; background:none; color:#777; font-size:1.07em;">
      Coded By: Ran Tenenbaum |
      <a href="https://aidevelopments.co.il/" target="_blank" style="color:#1568b2; text-decoration:none;">
        Ai Developments
      </a>
    </footer>
</body>
</html>
"""

with open("index.html", "w", encoding="utf-8") as f:
    f.write(html_code)

!pip install yt-dlp

!pip install ultralytics

!pip install pyngrok

!pip install torch torchvision

!pip install yt-dlp

import yt_dlp

def get_best_stream_url(youtube_url):
    ydl_opts = {'quiet': True, 'format': 'best'}
    with yt_dlp.YoutubeDL(ydl_opts) as ydl:
        info = ydl.extract_info(youtube_url, download=False)
        return info['url']

YOUTUBE_STREAM_URL = 'https://www.youtube.com/watch?v=rnXIjl_Rzy4'
REAL_STREAM_URL = get_best_stream_url(YOUTUBE_STREAM_URL)
print(REAL_STREAM_URL)

pip install pillow

!pip install ultralytics



from pyngrok import ngrok
ngrok.set_auth_token("30hcDgUttzwFLvyIgD822xjLxXy_5Pc4P4KRojCHPy1MnNAFe")  # תוכל לקבל מ-ngrok.com
public_url = ngrok.connect(8000)
print("Public URL:", public_url)

import os
import cv2
import numpy as np
import subprocess
from ultralytics import YOLO
from flask import Flask, Response, render_template, request, session, redirect, url_for, jsonify
import yt_dlp
from collections import deque
import threading
import time

app = Flask(__name__)
app.secret_key = 'yolo-people-counter'

model = YOLO('yolov8x.pt')

# Ensure the templates directory exists
os.makedirs('templates', exist_ok=True)

# Write the HTML content to a file named index.html in the templates directory
html_content = """
<!DOCTYPE html>
<html lang=\"he\" dir=\"rtl\">
<head>
    <meta charset=\"utf-8\">
    <title>People Counter - AI Developments</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 40px; background: #fafbfc; }
        .container { display: flex; flex-direction: row; justify-content: center; align-items: flex-start; gap: 40px; }
        .video-box { flex: 2; }
        .params-box {
            flex: 1;
            background: #fff;
            border-radius: 12px;
            box-shadow: 0 2px 8px #0001;
            padding: 32px 24px;
            min-width: 320px;
            max-width: 400px;
        }
        .params-box h3 { margin-top: 0; }
        label { font-weight: bold; }
        .param-group { margin-bottom: 20px; }
        .param-group input[type=\"text\"], .param-group input[type=\"number\"] { width: 100%; padding: 5px; border: 1px solid #bbb; border-radius: 5px; }
        .param-group input[type=\"range\"] { width: 85%; }
        .param-group input[type=\"checkbox\"] { margin-left: 8px; }
        .save-btn {
            background: #1b83e3;
            color: white;
            border: none;
            border-radius: 7px;
            padding: 10px 30px;
            font-size: 1.2em;
            cursor: pointer;
        }
        .save-btn:hover { background: #1568b2; }
        #stats-box {
            margin-top: 40px;
            background: #f4f6f9;
            border-radius: 12px;
            box-shadow: 0 2px 8px #0001;
            padding: 24px;
            direction: rtl;
        }
        #stats-box hr { margin: 16px 0; }
        #historyChart { background: #fff; border-radius: 8px; }
    </style>
</head>
<body>
    <h1>AI Developments - מונה אנשים בבינה מלאכותית</h1>
    <div class=\"container\">
        <!-- חלק שמאל: וידאו -->
        <div class=\"video-box\">
            <img id=\"videoStream\" src=\"/video_feed\" width=\"850\" style=\"border-radius: 12px; box-shadow: 0 4px 24px #0002;\">
            <!-- סטטיסטיקות מתעדכנות -->
            <div id=\"stats-box\">
                <h3>סטטיסטיקות בזמן אמת (10 דקות אחרונות)</h3>
                <div>
                    <strong>ממוצע אנשים:</strong> <span id=\"avg_people\">-</span><br>
                    <strong>ממוצע רכבים:</strong> <span id=\"avg_cars\">-</span><br>
                    <strong>ממוצע משאיות:</strong> <span id=\"avg_trucks\">-</span>
                </div>
                <hr>
                <h3>גרף שעה אחרונה</h3>
                <canvas id=\"historyChart\" height=\"130\"></canvas>
            </div>
        </div>
        <!-- חלק ימין: פרמטרים -->
        <div class=\"params-box\">
            <form method=\"post\">
                <h3>הגדרות זיהוי</h3>
                <!-- כתובת YouTube -->
                <div class=\"param-group\">
                    <label for=\"youtube_url\">כתובת YouTube Live:</label><br>
                    <input type=\"text\" id=\"youtube_url\" name=\"youtube_url\" value=\"{{ youtube_url|e }}\">
                </div>
                <!-- Drop down -->
                <div class=\"param-group\">
                    <label for=\"predefined_stream\">או בחר ממצלמות לייב פופולריות:</label><br>
                    <select id=\"predefined_stream\">
                        <option value=\"\">-- בחר ממצלמות --</option>
                        {% for stream in predefined_streams %}
                            <option value=\"{{ stream.url }}\">{{ stream.name }}</option>
                        {% endfor %}
                    </select>
                </div>
                <!-- סליידר קונפידנס -->
                <div class=\"param-group\">
                    <label for=\"conf\">סף זיהוי (Confidence):</label><br>
                    <input type=\"range\" id=\"conf\" name=\"conf\" min=\"0.01\" max=\"1\" step=\"0.01\" value=\"{{ conf }}\">
                    <span id=\"confValue\">{{ conf }}</span>
                </div>
                <!-- צ'קבוקסים לאובייקטים -->
                <div class=\"param-group\">
                    <label>מה לזהות?</label><br>
                    <input type=\"checkbox\" id=\"detect_people\" name=\"detect_people\" {% if detect_people %}checked{% endif %}>
                    <label for=\"detect_people\">אנשים</label>
                    <input type=\"checkbox\" id=\"detect_cars\" name=\"detect_cars\" {% if detect_cars %}checked{% endif %}>
                    <label for=\"detect_cars\">מכוניות</label>
                    <input type=\"checkbox\" id=\"detect_trucks\" name=\"detect_trucks\" {% if detect_trucks %}checked{% endif %}>
                    <label for=\"detect_trucks\">משאיות</label>
                </div>
                <!-- סליידר פריימים בשנייה -->
                <div class=\"param-group\">
                    <label for=\"fps\">פריימים לשנייה:</label><br>
                    <input type=\"range\" id=\"fps\" name=\"fps\" min=\"1\" max=\"10\" step=\"1\" value=\"{{ fps }}\">
                    <span id=\"fpsValue\">{{ fps }}</span>
                </div>
                <div class=\"param-group\" style=\"text-align: left;\">
                    <button type=\"submit\" class=\"save-btn\">שמור</button>
                </div>
            </form>
        </div>
    </div>
    <!-- צ'ארט גרף -->
    <script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>
    <script>
        // עדכון ערך קונפידנס לייד הסליידר
        document.getElementById('conf').oninput = function() {
            document.getElementById('confValue').innerText = this.value;
        };
        document.getElementById('fps').oninput = function() {
            document.getElementById('fpsValue').innerText = this.value;
        };
        // כאשר נבחר סטרים דרופדאון - מלא אוטומטית באינפוט
        document.getElementById('predefined_stream').onchange = function() {
            if (this.value) {
                document.getElementById('youtube_url').value = this.value;
            }
        };
        // סטטיסטיקות וגרף
        let historyChart = null;

        function updateStats() {
            fetch('/stats')
            .then(r => r.json())
            .then(data => {
                document.getElementById('avg_people').innerText = data.avg_people_10min;
                document.getElementById('avg_cars').innerText = data.avg_cars_10min;
                document.getElementById('avg_trucks').innerText = data.avg_trucks_10min;

                const labels = data.chart.map(pt => {
                    const date = new Date(pt.t * 1000);
                    return date.getHours().toString().padStart(2, '0') + ':' + date.getMinutes().toString().padStart(2, '0');
                });
                const peopleData = data.chart.map(pt => pt.people);
                const carsData = data.chart.map(pt => pt.cars);
                const trucksData = data.chart.map(pt => pt.trucks);

                if (!historyChart) {
                    const ctx = document.getElementById('historyChart').getContext('2d');
                    historyChart = new Chart(ctx, {
                        type: 'line',
                        data: {
                            labels: labels,
                            datasets: [
                                {
                                    label: 'אנשים',
                                    data: peopleData,
                                    fill: false,
                                    borderWidth: 2
                                },
                                {
                                    label: 'רכבים',
                                    data: carsData,
                                    fill: false,
                                    borderWidth: 2
                                },
                                {
                                    label: 'משאיות',
                                    data: trucksData,
                                    fill: false,
                                    borderWidth: 2
                                }
                            ]
                        },
                        options: {
                            responsive: true,
                            plugins: {
                                legend: { display: true, position: 'bottom' }
                            },
                            scales: {
                                y: {
                                    beginAtZero: true
                                }
                            }
                        }
                    });
                } else {
                    historyChart.data.labels = labels;
                    historyChart.data.datasets[0].data = peopleData;
                    historyChart.data.datasets[1].data = carsData;
                    historyChart.data.datasets[2].data = trucksData;
                    historyChart.update();
                }
            });
        }

        setInterval(updateStats, 10000);
        window.onload = function() {
            document.getElementById('confValue').innerText = document.getElementById('conf').value;
            document.getElementById('fpsValue').innerText = document.getElementById('fps').value;
            updateStats();
        };
    </script>
</body>
</html>
"""

with open('templates/index.html', 'w', encoding='utf-8') as f:
    f.write(html_content)


# רשימת סטרימים
PREDEFINED_STREAMS = [
    {"name": "New York - time square", "url": "https://www.youtube.com/watch?v=rnXIjl_Rzy4"},
    {"name": "New Orleans - street view", "url": "https://www.youtube.com/watch?v=qHW8srS0ylo"},
    {"name": "Dublin Ireland - main street", "url": "https://www.youtube.com/watch?v=u4UZ4UvZXrg"},
    {"name": "Jerusalem Israel - Western wall", "url": "https://www.youtube.com/watch?v=QhHYxiUlf-o"},
    {"name": "Jerusalem Israel - Western wall floor", "url": "https://www.youtube.com/watch?v=tg2ceBQnYKc"},
    {"name": "London UK - Abbey Road", "url": "https://www.youtube.com/watch?v=57w2gYXjRic"},
    {"name": "Kho Samui - Street Bars ", "url": "https://www.youtube.com/watch?v=DwKCna1mumk"},
    {"name": "Sturgis USA - Harly Davidson ", "url": "https://www.youtube.com/watch?v=uu82CI54eJU"},
    {"name": "Sukhumvit Road | Bangkok  ", "url": "https://www.youtube.com/watch?v=UemFRPrl1hk"},
    {"name": "Hollywood Beach - USA  ", "url": "https://www.youtube.com/watch?v=cmkAbDUEoyA"},
    {"name": "Alberta - Canada ", "url": "https://www.youtube.com/watch?v=_0wPODlF9wU"},
    {"name": "Supercar Spotting - California", "url": "https://www.youtube.com/watch?v=qMYlpMsWsBE"},
    {"name": "Virgin Island - Beach Bar ", "url": "https://www.youtube.com/watch?v=2wqpy036z24"},
    {"name": "Carebean - Beach", "url": "https://www.youtube.com/watch?v=loHbMM9JfCs"},
    {"name": "Manila Philpines - Resturant", "url": "https://www.youtube.com/watch?v=2sHUoP0WqGk"},
    {"name": "Melborn Australia - Bar", "url": "https://www.youtube.com/watch?v=w47yvCftkWQ"},
    {"name": "Pattya - Beach Road", "url": "https://www.youtube.com/watch?v=g_EiknClhwg"},
    {"name": "Africa  - Elefents", "url": "https://www.youtube.com/watch?v=XsOU8JnEpNM"},
    {"name": "Africa - Zebra", "url": "https://www.youtube.com/watch?v=RZFMYVNhd4k"},
    {"name": "Melborn Australia - Bar", "url": "https://www.youtube.com/watch?v=w47yvCftkWQ"},
    {"name": "Camelthorn Waterhole  - Wild", "url": "https://www.youtube.com/watch?v=mk02pEy3FdA"},
    {"name": "Africa Namibia - Desert", "url": "https://www.youtube.com/watch?v=ydYDqZQpim8"},



]

DEFAULT_YOUTUBE_STREAM_URL = PREDEFINED_STREAMS[0]["url"]

width, height = 1280, 720

# ------------------------ סטטיסטיקות ------------------------
stats = {
    'people': deque(maxlen=60),    # 10 דקות, כל 10 שניות
    'cars': deque(maxlen=60),
    'trucks': deque(maxlen=60),
    'history': deque(maxlen=360)   # שעה, כל 10 שניות
}
stats_lock = threading.Lock()
# -------------------------------------------------------------

def get_best_stream_url(youtube_url):
    ydl_opts = {'quiet': True, 'format': 'best[height<=720]'}
    with yt_dlp.YoutubeDL(ydl_opts) as ydl:
        info = ydl.extract_info(youtube_url, download=False)
        return info['url']

def start_ffmpeg_proc(real_stream_url, fps, width, height):
    ffmpeg_cmd = [
        'ffmpeg',
        '-i', real_stream_url,
        '-loglevel', 'error',
        '-f', 'image2pipe',
        f'-vf', f'fps={fps},scale={width}:{height}',
        '-vcodec', 'rawvideo',
        '-pix_fmt', 'bgr24',
        '-an', '-sn', '-dn', '-',
    ]
    return subprocess.Popen(ffmpeg_cmd, stdout=subprocess.PIPE, bufsize=10**8)

def gen_frames(conf, youtube_url, classes_list, fps):
    real_stream_url = get_best_stream_url(youtube_url)
    proc = start_ffmpeg_proc(real_stream_url, fps, width, height)
    stats_interval = 10  # seconds
    last_update = time.time()

    try:
        while True:
            raw = proc.stdout.read(width * height * 3)
            if not raw:
                continue
            frame = np.frombuffer(raw, np.uint8).reshape((height, width, 3))
            results = model(frame, classes=classes_list, conf=conf)
            boxes = results[0].boxes

            people_count = sum(1 for box in boxes if int(box.cls[0]) == 0) if 0 in classes_list else 0
            car_count = sum(1 for box in boxes if int(box.cls[0]) == 2) if 2 in classes_list else 0
            truck_count = sum(1 for box in boxes if int(box.cls[0]) == 7) if 7 in classes_list else 0

            annotated = results[0].plot(labels=False)
            y = 40
            if 0 in classes_list:
                cv2.putText(annotated, f'people: {people_count} (Conf: {conf})', (10, y), cv2.FONT_HERSHEY_SIMPLEX, 1, (255,255,255), 2)
                y += 40
            if 2 in classes_list:
                cv2.putText(annotated, f'cars: {car_count}', (10, y), cv2.FONT_HERSHEY_SIMPLEX, 1, (255,255,255), 2)
                y += 40
            if 7 in classes_list:
                cv2.putText(annotated, f'trucks: {truck_count}', (10, y), cv2.FONT_HERSHEY_SIMPLEX, 1, (255,255,255), 2)

            # עדכון סטטיסטיקות כל 10 שניות
            now = time.time()
            if now - last_update >= stats_interval:
                with stats_lock:
                    stats['people'].append(people_count)
                    stats['cars'].append(car_count)
                    stats['trucks'].append(truck_count)
                    stats['history'].append({
                        'timestamp': now,
                        'people': people_count,
                        'cars': car_count,
                        'trucks': truck_count
                    })
                last_update = now

            ret, buffer = cv2.imencode('.jpg', annotated)
            frame_bytes = buffer.tobytes()
            yield (b'--frame\r\n'
                   b'Content-Type: image/jpeg\r\n\r\n' + frame_bytes + b'\r\n')
    finally:
        proc.terminate()

@app.route('/', methods=['GET', 'POST'])
def index():
    if 'params' not in session:
        session['params'] = {
            'youtube_url': DEFAULT_YOUTUBE_STREAM_URL,
            'conf': 0.4,
            'detect_people': True,
            'detect_cars': True,
            'detect_trucks': False,
            'fps': 5
        }

    if request.method == 'POST':
        youtube_url = request.form.get('youtube_url', DEFAULT_YOUTUBE_STREAM_URL)
        conf = float(request.form.get('conf', 0.4))
        detect_people = 'detect_people' in request.form
        detect_cars = 'detect_cars' in request.form
        detect_trucks = 'detect_trucks' in request.form
        fps = int(request.form.get('fps', 5))
        session['params'] = {
            'youtube_url': youtube_url,
            'conf': conf,
            'detect_people': detect_people,
            'detect_cars': detect_cars,
            'detect_trucks': detect_trucks,
            'fps': fps
        }
        # איפוס סטטיסטיקות
        with stats_lock:
            stats['people'].clear()
            stats['cars'].clear()
            stats['trucks'].clear()
            stats['history'].clear()
        return redirect(url_for('index'))

    return render_template('index.html', **session['params'], predefined_streams=PREDEFINED_STREAMS)

@app.route('/video_feed')
def video_feed():
    params = session.get('params', {})
    youtube_url = params.get('youtube_url', DEFAULT_YOUTUBE_STREAM_URL)
    conf = float(params.get('conf', 0.4))
    fps = int(params.get('fps', 5))
    classes_list = []
    if params.get('detect_people', True):
        classes_list.append(0)
    if params.get('detect_cars', True):
        classes_list.append(2)
    if params.get('detect_trucks', False):
        classes_list.append(7)
    return Response(gen_frames(conf, youtube_url, classes_list, fps),
                    mimetype='multipart/x-mixed-replace; boundary=frame')

# ---------- API לסטטיסטיקות ועדכון גרף ----------
@app.route('/stats')
def get_stats():
    with stats_lock:
        avg_people = round(np.mean(stats['people']), 2) if stats['people'] else 0
        avg_cars = round(np.mean(stats['cars']), 2) if stats['cars'] else 0
        avg_trucks = round(np.mean(stats['trucks']), 2) if stats['trucks'] else 0

        history_list = list(stats['history'])
        chart = []
        for point in history_list:
            chart.append({
                't': int(point['timestamp']),
                'people': point['people'],
                'cars': point['cars'],
                'trucks': point['trucks']
            })
    return jsonify({
        'avg_people_10min': avg_people,
        'avg_cars_10min': avg_cars,
        'avg_trucks_10min': avg_trucks,
        'chart': chart
    })
# -------------------------------------------------

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=8000)